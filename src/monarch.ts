
const brackets = [
  { open: '[', close: ']', token: 'delimiter.square' },
  { open: '(', close: ')', token: 'delimiter.parenthesis' },
];

const keywords = [
  'dissect',
  'drop',
  'enrich',
  'eval',
  'explain',
  'from',
  'grok',
  'keep',
  'limit',
  'mv_expand',
  'rename',
  'row',
  'show',
  'sort',
  'stats',
  'where',
  'by',
  'and',
  'asc',
  'desc',
  'first',
  'in',
  'is',
  'last',
  'like',
  'not',
  'or',
  'rlike',
  'metadata',
  'as',
  'on',
  'with',
  'info',
  'using',
];

const builtinFunctions = [
  'ABS',
  'ACOS',
  'ASIN',
  'ATAN',
  'ATAN2',
  'BIT_LENGTH',
  'BUCKET',
  'BYTE_LENGTH',
  'CASE',
  'CATEGORIZE',
  'CBRT',
  'CEIL',
  'CIDR_MATCH',
  'COALESCE',
  'CONCAT',
  'COS',
  'COSH',
  'DATE_DIFF',
  'DATE_EXTRACT',
  'DATE_FORMAT',
  'DATE_PARSE',
  'DATE_TRUNC',
  'E',
  'ENDS_WITH',
  'EXP',
  'FLOOR',
  'FROM_BASE64',
  'GREATEST',
  'HASH',
  'HYPOT',
  'IP_PREFIX',
  'LEAST',
  'LEFT',
  'LENGTH',
  'LOCATE',
  'LOG',
  'LOG10',
  'LTRIM',
  'MATCH',
  'MV_APPEND',
  'MV_AVG',
  'MV_CONCAT',
  'MV_COUNT',
  'MV_DEDUPE',
  'MV_FIRST',
  'MV_LAST',
  'MV_MAX',
  'MV_MEDIAN',
  'MV_MEDIAN_ABSOLUTE_DEVIATION',
  'MV_MIN',
  'MV_PERCENTILE',
  'MV_PSERIES_WEIGHTED_SUM',
  'MV_SLICE',
  'MV_SORT',
  'MV_SUM',
  'MV_ZIP',
  'NOW',
  'PI',
  'POW',
  'QSTR',
  'REPEAT',
  'REPLACE',
  'REVERSE',
  'RIGHT',
  'ROUND',
  'RTRIM',
  'SIGNUM',
  'SIN',
  'SINH',
  'SPACE',
  'SPLIT',
  'SQRT',
  'ST_CONTAINS',
  'ST_DISJOINT',
  'ST_DISTANCE',
  'ST_ENVELOPE',
  'ST_INTERSECTS',
  'ST_WITHIN',
  'ST_X',
  'ST_XMAX',
  'ST_XMIN',
  'ST_Y',
  'ST_YMAX',
  'ST_YMIN',
  'STARTS_WITH',
  'SUBSTRING',
  'TAN',
  'TANH',
  'TAU',
  'TO_BASE64',
  'TO_BOOLEAN',
  'TO_CARTESIANPOINT',
  'TO_CARTESIANSHAPE',
  'TO_DATE_NANOS',
  'TO_DATEPERIOD',
  'TO_DATETIME',
  'TO_DEGREES',
  'TO_DOUBLE',
  'TO_GEOPOINT',
  'TO_GEOSHAPE',
  'TO_INTEGER',
  'TO_IP',
  'TO_LONG',
  'TO_LOWER',
  'TO_RADIANS',
  'TO_STRING',
  'TO_TIMEDURATION',
  'TO_UNSIGNED_LONG',
  'TO_UPPER',
  'TO_VERSION',
  'TRIM',
  // Aggregation functions
  'AVG',
  'COUNT',
  'COUNT_DISTINCT',
  'MAX',
  'MEDIAN',
  'MEDIAN_ABSOLUTE_DEVIATION',
  'MIN',
  'PERCENTILE',
  'ST_CENTROID_AGG',
  'ST_EXTENT_AGG',
  'STD_DEV',
  'SUM',
  'TOP',
  'VALUES',
  'WEIGHTED_AVG',
];

const commands = [
  'DISSECT',
  'DROP',
  'ENRICH',
  'EVAL',
  'EXPLAIN',
  'FROM',
  'FULL JOIN',
  'GROK',
  'INFO',
  'INLINESTATS',
  'JOIN',
  'KEEP',
  'LEFT JOIN',
  'LEFT',
  'LIMIT',
  'LOOKUP JOIN',
  'LOOKUP',
  'METRICS',
  'MV_EXPAND',
  'RENAME',
  'RIGHT JOIN',
  'RIGHT',
  'ROW',
  'SHOW INFO',
  'SHOW',
  'SORT',
  'STATS',
  'WHERE',
];

return {
  defaultToken: 'invalid',
  ignoreCase: true,
  // tokenPostfix: '',
  // keywords,
  // builtinFunctions,
  // brackets,
  tokenizer: {
    root: [
      ['', { token: '', switchTo: '@query'}],
    ],
    query: [
      { include: '@whitespace' },
      { include: '@sourceCommand' },
      { include: '@processingCommand' },
      // [
      //   /[a-zA-Z_$][a-zA-Z0-9_$]*\b/,
      //   {
      //     cases: {
      //       // '@keywords': 'keyword',
      //       // '@builtinFunctions': 'keyword',
      //       '@default': 'identifier',
      //     },
      //   },
      // ],
      // [/[()]/, '@brackets'],
      // [/".*?"/, 'string'],
      // [/'.*?'/, 'constant'],
      // [/`.*?`/, 'string'],
      // [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/, 'entity.name.function'],
      // [/⇐|<⇒|\*|\.|\:\:|\+|\-|\/|\/\/|%|&|\^|~|<|>|<=|=>|==|!=|<>|=/, 'keyword.operator'],
      // [/[\(]/, 'paren.lparen'],
      // [/[\)]/, 'paren.rparen'],
      // [/\s+/, 'text'],
    ],
    numbers: [
      [/\d+/, 'number'],
      [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number'],
    ],
    strings: [
      [/N'/, { token: 'string', next: '@string' }],
      [/'/, { token: 'string', next: '@string' }],
    ],
    string: [
      [/[^']+/, 'string'],
      [/''/, 'string'],
      [/'/, { token: 'string', next: '@pop' }],
    ],

    // -------------------------------------- Hidden channel: whitespace and comments

    whitespace: [
			[/[ \t\r\n]+/, ''],
			[/\/\*\*(?!\/)/, 'comment.doc', '@doc'],
			[/\/\*/, 'comment', '@comment'],
			[/\/\/.*$/, 'comment'],
		],

		comment: [
			[/[^\/*]+/, 'comment'],
			[/\*\//, 'comment', '@pop'],
			[/[\/*]/, 'comment']
		],

		doc: [
			[/[^\/*]+/, 'comment.doc'],
			[/\*\//, 'comment.doc', '@pop'],
			[/[\/*]/, 'comment.doc']
		],

    // ------------------------------------------------------------------ Commands

    sourceCommand: [
      [/FROM|EXPLAIN/, { token: 'keyword.command.name', switchTo: '@commandName'}],
    ],

    processingCommand: [
      [/\|{1}/, { token: 'delimiter.pipe', switchTo: '@beforeMnemonicWhitespace' }],
    ],

    beforeMnemonicWhitespace: [
      { include: '@whitespace' },
      ['', { token: '', switchTo: '@commandName'}],
    ],

    // Matches *command name*, i.e. the mnemonic.
    commandName: [
      // First tries to match all known command names.
      [commands.join('|'), { token: 'keyword.command.name', switchTo: '@root' }],

      // If command name is not well known, just matches the first word.
      [/\w+\b/, { token: 'keyword.command.name', switchTo: '@root' }],
    ],
  },
}